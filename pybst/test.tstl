@import bstree
pool: <int> 5
pool: <bstree> 2
pool: <Node> 2

property: <bstree>.is_valid()

<int> := <[1..20]>
<bstree> := bstree.BSTree()
<Node> := <bstree>.get_node(<int>)

<bstree>.insert(<int>, <int>)
assert <bstree>.get_node(<int>).value == <int>
assert <bstree>.is_valid()

<bstree>.insert(30, 'value30')
assert <bstree>.get_node(30).value == 'value30'
assert <bstree>.is_valid()

<bstree>.insert(10, 'value10')
assert <bstree>.get_node(10).value == 'value10'
assert <bstree>.is_valid()

<bstree>.insert(20, 'value20')
assert <bstree>.get_node(20).value == 'value20'
assert <bstree>.is_valid()

<bstree>.delete(30)
assert <bstree>.get_node(30) is None
assert <bstree>.is_valid()

<bstree>.insert(10, 'value10')
<bstree>.insert(20, 'value20')
<bstree>.insert(30, 'value30')
assert <bstree>.get_max().key == 30
assert <bstree>.get_min().key == 10
assert <bstree>.get_element_count() == 3
assert <bstree>.get_height() == 2
assert <bstree>.is_valid()

<bstree>.insert(10, 'value10')
<bstree>.insert(20, 'value20')
<bstree>.insert(30, 'value30')
assert <bstree>.is_valid()
assert <bstree>.get_height() == 2

<bstree>.delete(<int>)
assert <bstree>.get_node(<int>) is None
assert <bstree>.is_valid()

<bstree>.get_node(<int>)
<bstree>.get_max()
<bstree>.get_min()
<bstree>.get_element_count()
<bstree>.get_height()
<bstree>.preorder()
<bstree>.inorder()
<bstree>.postorder()
<bstree>.levelorder()
