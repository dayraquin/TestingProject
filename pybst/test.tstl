@import bstree
pool: <int> 5
pool: <bstree> 2
pool: <Node> 2
pool: <Node1> 2
pool: <Node2> 2
pool: <list> 10

property: <bstree>.is_valid()

<int> := <[1..20]>
<bstree> := bstree.BSTree()
<Node> := <bstree>.get_node(<int>)

<Node> := bstree.Node(<int>, 'value<int>')
assert <Node>.key == <int>
assert <Node>.value == 'value<int>'
assert <Node>.left is None
assert <Node>.right is None
assert <Node>.parent is None

<bstree> := bstree.BSTree([(10, 'value10'), (5, 'value5'), (15, 'value15')])
assert <bstree>.is_valid()

# Test for a tree where left child is not less than parent
invalid_tree = bstree.BSTree([(10, 'value10')])
invalid_tree.Root.left = bstree.Node(20, 'value20')  
assert not <bstree>.is_valid()


# Test for a tree where right child is not greater than parent
<bstree> := bstree.BSTree([(10, 'value10')])
<bstree>.Root.right = bstree.Node(5, 'value5') 
assert not <bstree>.is_valid()

# left child
<bstree> := bstree.BSTree([(10, 'value1'), (20, 'value2'), (30, 'value3')])
assert <bstree>.get_node(1).value == 'value1'
assert <bstree>.get_node(2).value == 'value2'
assert <bstree>.get_node(3).value == 'value3'
assert <bstree>.is_valid()

preorder_nodes = <bstree>.preorder()
preorder_keys = [node.key for node in preorder_nodes]
assert preorder_keys == [10,20,30]

inorder_nodes = <bstree>.inorder()
inorder_keys = [node.key for node in inorder_nodes]
assert inorder_keys == [10,20,30]

postorder_nodes = <bstree>.postorder()
postorder_keys = [node.key for node in postorder_nodes]
assert postorder_keys == [30, 20, 10]

# 2 children
<bstree> := bstree.BSTree([(10, 'value10'), (5, 'value5'), (15, 'value15'), (3, 'value3'), (7, 'value7'), (13, 'value13'), (17, 'value17')])
assert <bstree>.get_node(1).value == 'value10'
assert <bstree>.get_node(2).value == 'value5'
assert <bstree>.get_node(3).value == 'value15'
assert <bstree>.get_node(4).value == 'value3'
assert <bstree>.get_node(5).value == 'value7'
assert <bstree>.get_node(6).value == 'value13'
assert <bstree>.get_node(7).value == 'value17'

preorder_nodes = <bstree>.preorder()
preorder_keys = [node.key for node in preorder_nodes]
assert preorder_keys == [10, 5, 3, 7, 15, 13, 17]

inorder_nodes = <bstree>.inorder()
inorder_keys = [node.key for node in inorder_nodes]
assert inorder_keys == [3, 5, 7, 10, 13, 15, 17]

postorder_nodes = <bstree>.postorder()
postorder_keys = [node.key for node in postorder_nodes]
assert postorder_keys == [3, 7, 5, 13, 17, 15, 10]

# no children
<bstree> := bstree.BSTree([(10, 'value10'), (5, 'value5'), (15, 'value15')])
assert <bstree>.get_node(1).value == 'value10'
assert <bstree>.get_node(2).value == 'value5'
assert <bstree>.get_node(3).value == 'value15'

preorder_nodes = <bstree>.preorder()
preorder_keys = [node.key for node in preorder_nodes]
assert preorder_keys == [10, 5, 15]

inorder_nodes = <bstree>.inorder()
inorder_keys = [node.key for node in inorder_nodes]
assert inorder_keys == [5, 10, 15]

postorder_nodes = <bstree>.postorder()
postorder_keys = [node.key for node in postorder_nodes]
assert postorder_keys == [5, 15, 10]

# left child
<bstree> := bstree.BSTree([(10, 'value10'), (5, 'value5'), (3, 'value3')])
assert <bstree>.get_node(1).value == 'value10'
assert <bstree>.get_node(2).value == 'value5'
assert <bstree>.get_node(3).value == 'value3'


preorder_nodes = <bstree>.preorder()
preorder_keys = [node.key for node in preorder_nodes]
assert preorder_keys == [10, 5, 3]

inorder_nodes = <bstree>.inorder()
inorder_keys = [node.key for node in inorder_nodes]
assert inorder_keys == [3, 5, 10]

postorder_nodes = <bstree>.postorder()
postorder_keys = [node.key for node in postorder_nodes]
assert postorder_keys == [3, 5, 10]

<bstree>.insert(<int>, <int>)
assert <bstree>.get_node(<int>).value == <int>
assert <bstree>.is_valid()

<bstree>.insert(30, 'value30')
assert <bstree>.get_node(30).value == 'value30'
assert <bstree>.is_valid()

<bstree>.insert(10, 'value10')
assert <bstree>.get_node(10).value == 'value10'
assert <bstree>.is_valid()

<bstree>.insert(20, 'value20')
assert <bstree>.get_node(20).value == 'value20'
assert <bstree>.is_valid()

<bstree>.delete(30)
assert <bstree>.get_node(30) is None
assert <bstree>.is_valid()

<bstree>.insert(10, 'value10')
<bstree>.insert(20, 'value20')
<bstree>.insert(30, 'value30')

<bstree>.get_node(<int>)
<bstree>.get_max()
<bstree>.get_min()
<bstree>.get_element_count()
<bstree>.get_height()
<bstree>.preorder()
<bstree>.inorder()
<bstree>.postorder()
<bstree>.levelorder()

assert <bstree>.get_max().key == 30
assert <bstree>.get_min().key == 10
assert <bstree>.get_element_count() == 3
assert <bstree>.get_height() == 2
assert <bstree>.is_valid()

<bstree>.delete(<int>)
assert <bstree>.get_node(<int>) is None
assert <bstree>.is_valid()

<bstree> := bstree.BSTree([(10, 'value10'), (5, 'value5'), (15, 'value15')])  # BST with both left and right children
<list> := <bstree>.levelorder()
assert <list> == [10,5,15]
<bstree> := bstree.BSTree([(10, 'value10'), (5, 'value5')])  # BST with only left children
<list> := <bstree>.levelorder()
assert <list> == [10,5] 
<bstree> := bstree.BSTree([(10, 'value10'), (15, 'value15')])  # BST with only right children
<list> := <bstree>.levelorder()
assert <list> == [10,15]
<bstree> := bstree.BSTree([(10, 'value10'), (5, 'value5'), (15, 'value15'), (3, 'value3'), (7, 'value7'), (13, 'value13'), (17, 'value17')])
<list> := <bstree>.levelorder()
assert <list> == [10,5,15,3,7,13,17]

<bstree> := bstree.BSTree([])
<bstree>.insert(10, 'value10')
assert <bstree>.Root.key == 10
assert <bstree>.Root.value == 'value10'

<bstree> := bstree.BSTree([(10, 'value10')])
<bstree>.insert(10, 'value10')
assert <bstree>.get_element_count() == 1

<bstree> := bstree.BSTree([(10, 'value10')])
<bstree>.insert(5, 'value5')
assert <bstree>.Root.left.key == 5
assert <bstree>.Root.left.value == 'value5'

<bstree> := bstree.BSTree([(10, 'value10')])
<bstree>.insert(15, 'value15')
assert <bstree>.Root.right.key == 15
assert <bstree>.Root.right.value == 'value15'

<bstree> := bstree.BSTree([])
<bstree>.insert_from([(10, 'value10'), (5, 'value5'), (15, 'value15')])
assert <bstree>.get_element_count() == 3

<bstree> := bstree.BSTree([(10, 'value10'), (15, 'value15')])  # BST where root has a right child
<Node> := <bstree>.get_max()
assert <Node>.key == 15

<bstree> := bstree.BSTree([(10, 'value10')])  # BST where root does not have a right child
<Node> := <bstree>.get_max()
assert <Node>.key == 10

<bstree> := bstree.BSTree([(10, 'value10'), (5, 'value5')])  # BST where root has a left child
<Node> := <bstree>.get_min()
assert <Node>.key == 5

<bstree> := bstree.BSTree([(10, 'value10')])  # BST where root does not have a left child
<Node> := <bstree>.get_min()
assert <Node>.key == 10

<bstree> := bstree.BSTree()
<Node> := <bstree>.get_node(<int>)

# Adding nodes to the BSTree
<bstree>.insert(<Node>)

# Testing get_element_count
<int> := <bstree>.get_element_count()
assert <int> == 1  # Since we have added only one node

# Adding more nodes
<Node> := bstree.Node(<int>, 'value<int>')
<bstree>.insert(<Node>)
<int> := <bstree>.get_element_count()
assert <int> == 2  # Now we have two nodes

# Testing get_element_count with a specific node
<Node> := <bstree>.get_node(<int>)
<int> := <bstree>.get_element_count(<Node>)
assert <int> == 1  # The specific node has no children


<bstree> := bstree.BSTree()
<Node> := <bstree>.get_node(<int>)

<Node> := bstree.Node(<int>, 'value<int>')
assert <Node>.key == <int>
assert <Node>.value == 'value<int>'
assert <Node>.left is None

# Adding nodes to the BSTree
<bstree>.insert(<Node>)

# Testing get_height
<int> := <bstree>.get_height()
assert <int> == 0  # Since we have added only one node, the height is 0

# Adding more nodes
<Node> := bstree.Node(<int>, 'value<int>')
<bstree>.insert(<Node>)
<int> := <bstree>.get_height()
assert <int> == 1  # Now we have two nodes, so the height is 1

# Testing _delete_leaf
<bstree>._delete_leaf(<Node>)
<int> := <bstree>.get_element_count()
assert <int> == 1  # After deleting a leaf, we should have one node left

<bstree> := bstree.BSTree()
<Node> := <bstree>.get_node(<int>)

<Node> := bstree.Node(<int>, 'value<int>')
assert <Node>.key == <int>
assert <Node>.value == 'value<int>'
assert <Node>.left is None

# Adding nodes to the BSTree
<bstree>.insert(<Node>)

# Adding more nodes
<Node> := bstree.Node(<int>, 'value<int>')
<bstree>.insert(<Node>)

# Testing _delete_leaf with a leaf node
<bstree>._delete_leaf(<Node>)
<int> := <bstree>.get_element_count()
assert <int> == 1  # After deleting a leaf, we should have one node left

<bstree> := bstree.BSTree()
<Node> := <bstree>.get_node(<int>)

<Node> := bstree.Node(<int>, 'value<int>')
assert <Node>.key == <int>
assert <Node>.value == 'value<int>'
assert <Node>.left is None

# Adding nodes to the BSTree
<bstree>.insert(<Node>)

# Adding more nodes
<Node> := bstree.Node(<int>, 'value<int>')
<bstree>.insert(<Node>)

# Testing _delete_leaf_parent with a leaf node
<bstree>._delete_leaf_parent(<Node>)
<int> := <bstree>.get_element_count()
assert <int> == 1  # After deleting a leaf, we should have one node left

# Testing _delete_leaf_parent with the root node
<Node> := <bstree>.get_node(<int>)  # Get the root node
<bstree>._delete_leaf_parent(<Node>)
<int> := <bstree>.get_element_count()
assert <int> == 0  # After deleting the root, the tree should be empty

<bstree> := bstree.BSTree()
<Node> := <bstree>.get_node(<int>)

<Node> := bstree.Node(<int>, 'value<int>')
assert <Node>.key == <int>
assert <Node>.value == 'value<int>'
assert <Node>.left is None

# Adding nodes to the BSTree
<bstree>.insert(<Node>)

# Adding more nodes
<Node> := bstree.Node(<int>, 'value<int>')
<bstree>.insert(<Node>)

# Testing _switch_nodes with the root node and a leaf node
<Node1> := <bstree>.get_node(<int>)  # Get the root node
<Node2> := <bstree>.get_node(<int>)  # Get a leaf node
<bstree>._switch_nodes(<Node1>, <Node2>)
assert <Node1>.key == <Node2>.key  # After switching, the keys should be equal
assert <Node1>.value == <Node2>.value  # After switching, the values should be equal
assert <bstree>.Root.key == <Node2>.key  # The root node should now have the key of Node2
assert <bstree>.Root.value == <Node2>.value  # The root node should now have the value of Node2

# Testing _switch_nodes with two non-root nodes
<Node1> := <bstree>.get_node(<int>)  # Get a non-root node
<Node2> := <bstree>.get_node(<int>)  # Get another non-root node
<bstree>._switch_nodes(<Node1>, <Node2>)
assert <Node1>.key == <Node2>.key  # After switching, the keys should be equal
assert <Node1>.value == <Node2>.value  # After switching, the values should be equal

<bstree> := bstree.BSTree()
<Node> := <bstree>.get_node(<int>)

<Node> := bstree.Node(<int>, 'value<int>')
assert <Node>.key == <int>
assert <Node>.value == 'value<int>'
assert <Node>.left is None

# Adding nodes to the BSTree
<bstree>.insert(<Node>)

# Adding more nodes
<Node> := bstree.Node(<int>, 'value<int>')
<bstree>.insert(<Node>)

# Testing delete with a leaf node
<bstree>.delete(<Node>.key)
<int> := <bstree>.get_element_count()
assert <int> == 1  # After deleting a leaf, we should have one node left

# Testing delete with a non-leaf node
<bstree>.delete(<Node>.key)
<int> := <bstree>.get_element_count()
assert <int> == 0  # After deleting a non-leaf node, the tree should be empty

# Testing delete_from with a sequence of keys
seq = [<int>, <int>]  # Replace <int> with actual keys
<bstree>.delete_from(seq)
<int> := <bstree>.get_element_count()
assert <int> == 0  # After deleting all nodes, the tree should be empty
