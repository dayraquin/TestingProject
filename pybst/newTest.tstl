@import bstree
pool: <int> 10
pool: <bstree> 5
pool: <seq> 5
<bstree> := bstree.BSTree()

property: <bstree>.is_valid()

<int> := <[1..50]>
<seq> := [ (<int>, "value"), (<int>, "value"), (<int>, "value") ]
<bstree>.insert(<int>, "value")
assert <bstree>.get_node(<int>) is not None, "Node insertion failed"

<bstree>.insert_from(<seq>)
assert <bstree>.get_element_count() == len(<seq>), "Not all elements were inserted"

<bstree>.get_max()
<bstree>.get_min()
assert <bstree>.get_element_count() > 0, "Count is 0"
assert <bstree>.get_height() > 0, "Height is 0"
assert <bstree>.is_valid(), "BST is not valid"

<bstree>.preorder()
<bstree>.inorder()
<bstree>.postorder()
<bstree>.levelorder()
assert len(<bstree>.preorder()) > 0, "Preorder failed"
assert len(<bstree>.inorder()) > 0, "Inorder failed"
assert len(<bstree>.postorder()) > 0, "Postorder failed"
assert len(<bstree>.levelorder()) > 0, "Levelorder failed"

preorder_nodes = <bstree>.preorder()
preorder_indices = {node: i for i, node in enumerate(preorder_nodes)}

# Check that parent comes before its children in preorder traversal
assert all( 
    preorder_indices[node] < preorder_indices[node.left] if node.left else True
    and
    preorder_indices[node] < preorder_indices[node.right] if node.right else True
    for node in preorder_nodes
), "Preorder not in order"

assert <bstree>.get_node(<int>) is not None, "Node not found"

<bstree>.delete(<int>)
assert <bstree>.get_node(<int>) is None, "Deletion failed"

<bstree>.delete_from([<int>, <int>, <int>])
